[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
image-path = ../../images
network = simu5g.simulations.Iov.IovScenario

# Simulation parameters
debug-on-errors = false
print-undisposed = false
sim-time-limit=70s
**.udp.e2eDelay.vector-recording = true
*.rsu.udp.scalar-recording = true
*.car[0].udp.scalar-recording = true

*.playgroundSizeX = 20000m
*.playgroundSizeY = 20000m
*.playgroundSizeZ = 50m

# VeinsManager parameters
*.veinsManager.host = "localhost"
*.veinsManager.moduleType = "simu5g.nodes.cars.Car"
*.veinsManager.moduleName = "car"
*.veinsManager.launchConfig = xmldoc("heterogeneous.launchd.xml")
*.veinsManager.updateInterval = 0.1s

# Mobility parameters for dynamic nodes (cars)
*.car[*].mobilityType = "VeinsInetMobility"


# LTE specific parameters
**.numBands = 25
**.ueTxPower = 26
**.eNodeBTxPower = 46
**.sinrThreshold = 0dB

# Dynamic cell association for mobile nodes
*.car[*].cellularNic.phy.dynamicCellAssociation = true
**.car[*].masterId = 1
**.car[*].macCellId = 1

# eNodeB configuration
**.eNodeB1.macCellId = 1
**.eNodeB1.macNodeId = 1
**.eNodeB2.macCellId = 2
**.eNodeB2.macNodeId = 2

# Enable handover
*.car[*].cellularNic.phy.enableHandover = true
*.eNodeB*.cellularNic.phy.enableHandover = true
*.eNodeB*.cellularNic.phy.handoverLatency = 50ms
*.eNodeB*.cellInfo.broadcastMessageInterval = 1s

# X2 and SCTP configuration
*.eNodeB*.numX2Apps = 1
*.eNodeB*.x2App[*].server.localPort = 5000 + ancestorIndex(1)
*.eNodeB1.x2App[0].client.connectAddress = "eNodeB2%x2ppp0"
*.eNodeB2.x2App[0].client.connectAddress = "eNodeB1%x2ppp0"
**.sctp.nagleEnabled = false
**.sctp.enableHeartbeats = false

# --- Config for RSU -> Cloud -> Car Communication ---
[Config RSU-Cloud-Car]
# Application Setup using UdpBasicApp for reliable performance measurement

# RSU sends data to the server
*.rsu.numApps = 1
*.rsu.app[0].typename = "UdpBasicApp"
*.rsu.app[0].destAddresses = "server"
*.rsu.app[0].destPort = 5000
*.rsu.app[0].messageLength = 1000B
*.rsu.app[0].sendInterval = 0.02s
*.rsu.app[0].startTime = 1s

# Server acts as a relay: receives from RSU and sends to car[0]
*.server.numApps = 2
# App 0 receives from RSU (parameters are placeholders but required)
*.server.app[0].typename = "UdpBasicApp"
*.server.app[0].localPort = 5000
*.server.app[0].destAddresses = ""
*.server.app[0].destPort = 5000
*.server.app[0].messageLength = 0B
*.server.app[0].sendInterval = 0s # Never sends
*.server.app[0].startTime = 0s

# App 1 sends to car[0]
*.server.app[1].typename = "UdpBasicApp"
*.server.app[1].destAddresses = "car[0]"
*.server.app[1].destPort = 5001
*.server.app[1].messageLength = 1000B
*.server.app[1].sendInterval = 0.02s
*.server.app[1].startTime = 1.1s # Simulate processing delay

# All cars are configured to receive, but only car[0] will get data
*.car[*].numApps = 1
*.car[*].app[0].typename = "UdpBasicApp"
*.car[*].app[0].localPort = 5001
*.car[*].app[0].destAddresses = "" # Not used, but required
*.car[*].app[0].destPort = 5001      # Not used, but required
*.car[*].app[0].messageLength = 0B   # Not used, but required
*.car[*].app[0].sendInterval = 0s # Never sends
*.car[*].app[0].startTime = 0s


# --- Statistics Recording Setup (Correct Syntax & Location) ---

# 1. End-to-End Delay (Vector)
*.car[0].udp.e2eDelay:vector.recording = true

# 2. Throughput (Vector)
*.car[0].app[0].rcvdPk:throughput:vector.recording = true

# 3. Packet Loss Calculation (Scalars)
*.rsu.udp.sentPk:count.recording = true
*.car[0].udp.rcvdPk:count.recording = true

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${repetition}.vec

# --- Measurement of Bandwidth Utilization and Load ---

# 1. Bandwidth Utilization on the Core Network Link (Router <-> PGW)
# This records the utilization of the 10G Ethernet link.
# The result is a value between 0 and 1.
**.pgw.pppg[0].channel.utilization:vector.recording = true

# 2. Cell Load (Used PRBs) for each eNodeB
# This records the number of Physical Resource Blocks (PRBs) used in the downlink at each scheduling interval.
# To get the load ratio, this value must be divided by the total available PRBs.
*.eNodeB*.mac.usedPrbsDl:vector.recording = true

# --- Measurement of Physical Layer ---
*.car[*].cellularNic.phy.channelModel.rcvdSinr:vector.recording = true
*.car[*].cellularNic.phy.channelModel.distance:vector.recording = true
*.car[*].cellularNic.phy.channelModel.coverageStatus:vector.recording = true
*.car[*].cellularNic.phy.channelModel.receivedPower:vector.recording = true
*.car[*].cellularNic.phy.channelModel.interferencePower:vector.recording = true