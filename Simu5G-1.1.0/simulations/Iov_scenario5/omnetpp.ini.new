[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
image-path = ../../images
network = simu5g.simulations.Iov_scenario5.IovScenario

# Simulation parameters
debug-on-errors = false
print-undisposed = false
sim-time-limit=70s
**.udp.e2eDelay.vector-recording = true
*.rsu.udp.scalar-recording = true
*.car[0].udp.scalar-recording = true

*.playgroundSizeX = 20000m
*.playgroundSizeY = 20000m
*.playgroundSizeZ = 50m

# VeinsManager parameters
*.veinsManager.host = "localhost"
*.veinsManager.moduleType = "simu5g.nodes.cars.Car"
*.veinsManager.moduleName = "car"
*.veinsManager.launchConfig = xmldoc("heterogeneous.launchd.xml")
*.veinsManager.updateInterval = 0.1s
*.veinsManager.autoShutdown = true  # 自动关闭SUMO
*.veinsManager.margin = 25  # 增加边界余量
#*.veinsManager.launchd.sumocfg = "heterogeneous.sumocfg"  # 明确指定SUMO配置文件

# Mobility parameters for dynamic nodes (cars)
*.car[*].mobilityType = "VeinsInetMobility"


# 5G NR specific parameters
**.numBands = 25
**.ueTxPower = 26
**.eNodeBTxPower = 46  # 虽然是gNodeB，但参数名称仍为eNodeBTxPower
**.sinrThreshold = 0dB

# 5G NR特有参数（与4G LTE明显不同的配置）
# 5G NR支持多种频段，此处使用3.5GHz中频频段（n78频段）
**.cellularNic.channelModel.componentCarrierFrequency = 3.5GHz  # 5G中频频段
**.cellularNic.channelModel.carrierFrequency = 3.5GHz
# 根据3GPP规范，5G NR 20MHz带宽在15kHz子载波间隔下为106个资源块
**.cellularNic.channelModel.numRbDl = 106  # 5G NR 20MHz带宽下的RB数
**.cellularNic.channelModel.numRbUl = 106
**.cellularNic.channelModel.numBands = 25
# 5G NR支持多种子载波间隔(SCS)：15kHz、30kHz、60kHz、120kHz等
**.cellularNic.nrChannelModel[0].scs = "15kHz"  # 子载波间隔
**.cellularNic.nrChannelModel[0].numRefScPerRb = 12
# 5G NR引入Numerology概念，不同SCS对应不同的Numerology值
**.cellularNic.nrChannelModel[0].rbxNumerology = 1  # 5G NR Numerology

# Dynamic cell association for mobile nodes
*.car[*].cellularNic.phy.dynamicCellAssociation = true
**.car[*].masterId = 1
**.car[*].macCellId = 1

# gNodeB configuration
**.gNodeB1.macCellId = 1
**.gNodeB1.macNodeId = 1
**.gNodeB2.macCellId = 2
**.gNodeB2.macNodeId = 2
**.gNodeB3.macCellId = 3
**.gNodeB3.macNodeId = 3

# Enable handover
*.car[*].cellularNic.phy.enableHandover = false
*.gNodeB*.cellularNic.phy.enableHandover = false
*.gNodeB*.cellularNic.phy.handoverLatency = uniform(40ms, 60ms)
*.gNodeB*.cellInfo.broadcastMessageInterval = 1s

# X2 and SCTP configuration (在5G中称为Xn接口，但Simu5G中组件名仍为X2)
*.gNodeB1.numX2Apps = 2
*.gNodeB2.numX2Apps = 2
*.gNodeB3.numX2Apps = 2

# gNodeB1 connections
*.gNodeB1.x2App[0].client.connectAddress = "gNodeB2%x2ppp0"
*.gNodeB1.x2App[1].client.connectAddress = "gNodeB3%x2ppp0"

# gNodeB2 connections
*.gNodeB2.x2App[0].client.connectAddress = "gNodeB1%x2ppp0"
*.gNodeB2.x2App[1].client.connectAddress = "gNodeB3%x2ppp0"

# gNodeB3 connections
*.gNodeB3.x2App[0].client.connectAddress = "gNodeB1%x2ppp0"
*.gNodeB3.x2App[1].client.connectAddress = "gNodeB2%x2ppp0"

# Common X2 configuration
**.gNodeB*.x2App[*].server.localPort = 5000 + ancestorIndex(1)
**.gNodeB*.x2App[*].client.connectPort = 5000
**.gNodeB*.x2App[*].client.startTime = 0.5s
**.sctp.nagleEnabled = false
**.sctp.enableHeartbeats = false

# --- 基础5G NR配置 ---
[Config Base5G]
# 5G NR NIC类型配置
*.car[*].cellularNic.nicType = "NRNicUe"
*.gNodeB*.cellularNic.nicType = "NRNicGnb"

# 使用IoV专用的Channel Model
*.car[*].cellularNic.channelModel.typename = "IovNRChannelModel"
*.gNodeB*.cellularNic.channelModel.typename = "IovNRChannelModel"
*.rsu.cellularNic.channelModel.typename = "IovNRChannelModel"

# RSU配置
*.rsu.mobility.initialX = 560m
*.rsu.mobility.initialY = 42m
*.rsu.mobility.initialZ = 0m
# 由于现在RSU基于NRCar模块，它已经配置了cellular接口和HostAutoConfigurator，不需要额外的接口配置

# 5G NR调度配置
*.gNodeB*.cellularNic.mac.schedulingDisciplineDl = "MAXCI"
*.gNodeB*.cellularNic.mac.schedulingDisciplineUl = "MAXCI"

# 5G NR物理层特性
*.gNodeB*.cellularNic.phy.enableBLER = true
*.gNodeB*.cellularNic.phy.fbPeriod = 40  # 反馈周期
*.gNodeB*.cellularNic.phy.usePrecoding = true  # 使用预编码
*.gNodeB*.cellularNic.phy.numAntennas = 8  # 天线数量
*.car[*].cellularNic.phy.numAntennas = 4  # UE天线数量

# --- PC5直连配置 ---
# 全局启用D2D (PC5 Sidelink) 功能，不限于特定场景配置
# 这使得车辆和RSU可以直接通信，无需通过基站中继

# PC5/D2D配置 - 使用D2D模式模拟PC5直连通信
*.car[*].cellularNic.d2dCapable = true  # 启用D2D（模拟PC5）
*.rsu.cellularNic.d2dCapable = true
*.rsu.nrMasterId = 1     # 5G NR主站ID 
*.rsu.nrMacCellId = 1    # 5G NR小区ID
*.gNodeB*.cellularNic.d2dEnabled = true # 基站支持D2D

# 设置D2D初始模式
*.car[*].cellularNic.d2dInitialMode = true
*.rsu.cellularNic.d2dInitialMode = true

# 设置AMC模式为D2D
**.amcMode = "D2D"

# 确保RSU可以使用PC5/D2D通信
# RSU的LTE/4G参数（legacy）
*.rsu.masterId = 1  # 初始关联到gNodeB1
*.rsu.macCellId = 1

# PC5发送功率
*.car[*].cellularNic.phy.d2dTxPower = 23  # dBm
*.rsu.cellularNic.phy.d2dTxPower = 26     # dBm

# D2D CQI配置
*.gNodeB*.cellularNic.phy.enableD2DCqiReporting = true  # 启用D2D CQI报告
**.usePreconfiguredTxParams = false  # 动态选择CQI

# PC5资源预留
*.gNodeB*.cellularNic.mac.schedulingGrantType = "AUTOMATIC"
*.gNodeB*.cellularNic.mac.d2dResourceReservationInterval = 0.1s

# --- 使用PC5的交通信息应用配置 ---
[Config PC5TrafficInfo]
extends = Base5G
output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${repetition}.vec

# 应用层配置
*.rsu.numApps = 1
*.car[*].numApps = 1

# --- RSU 应用 (发送端) ---
*.rsu.app[0].typename = "simu5g.apps.trafficlight.TrafficLightRsuApp"
*.rsu.app[0].destAddresses = "255.255.255.255" # 修正: 使用广播地址, 与PC5行为匹配
*.rsu.app[0].destPort = 5001
*.rsu.app[0].checkInterval = 0.5s  # 每0.5秒检查一次红绿灯状态
*.rsu.app[0].traciModulePath = "veinsManager"
*.rsu.app[0].monitoredTLs = "0/0,0/1,0/2,1/0,1/1,1/2,2/0,2/1,2/2"  # 监控所有9个路口的红绿灯
*.rsu.app[0].messageLength = 500B
*.rsu.app[0].multicastInterface = "wlan" # 使用NRCar默认的无线接口名称

# --- 车辆应用 (接收端) ---
*.car[*].app[0].typename = "simu5g.apps.trafficlight.TrafficLightCarApp"
*.car[*].app[0].localPort = 5001 # 必须指定监听端口

# --- 核心统计记录 ---
# 1. 应用层端到端延迟
*.car[*].app[0].tlInfoReceived:count.result-recording-modes = all
*.car[*].app[0].endToEndDelay:vector.result-recording-modes = all
*.car[*].app[0].endToEndDelay:mean.result-recording-modes = all
*.car[*].app[0].endToEndDelay:max.result-recording-modes = all
*.rsu.app[0].sentPk:count.result-recording-modes = all

# 2. 信号质量指标
*.car[*].cellularNic.channelModel.rcvdSinr:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.distance:vector.result-recording-modes = all

# 3. 信号强度和变化率
# 在5G中，我们使用RSRP(Reference Signal Received Power)而不是RSSI
*.car[*].cellularNic.channelModel.receivedPower:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.rsrp:vector.result-recording-modes = all

# 4. 覆盖范围 (基于SINR阈值的覆盖状态)
*.car[*].cellularNic.channelModel.coverageStatus:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.coverageStatus:timeavg.result-recording-modes = all

# 5. 中断统计
*.car[*].cellularNic.channelModel.connectionInterruption:count.result-recording-modes = all
*.car[*].cellularNic.channelModel.connectionRestoration:count.result-recording-modes = all
*.car[*].cellularNic.channelModel.interruptionDuration:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.interruptionDuration:mean.result-recording-modes = all
*.car[*].cellularNic.channelModel.interruptionDuration:max.result-recording-modes = all

# 6. 干扰水平 (SINR)
*.car[*].cellularNic.channelModel.interferencePower:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.sinr:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.rcvdSinr:vector.result-recording-modes = all
*.car[*].cellularNic.phy.d2dChannelModel.sinrVector:vector.result-recording-modes = all

# 7. 握手失败率
*.car[*].cellularNic.phy.handoverAttempt:count.result-recording-modes = all
*.car[*].cellularNic.phy.handoverFailure:count.result-recording-modes = all
*.gNodeB*.handoverManager.startHandover:count.result-recording-modes = all
*.gNodeB*.handoverManager.endHandover:count.result-recording-modes = all

# 8. HARQ错误率
*.car[*].cellularNic.mac.harqErrorRateUl:vector.result-recording-modes = all
*.car[*].cellularNic.mac.harqErrorRateDl:vector.result-recording-modes = all
*.car[*].cellularNic.mac.harqErrorRateD2D:vector.result-recording-modes = all
*.rsu.cellularNic.mac.harqErrorRateD2D:vector.result-recording-modes = all
*.car[*].cellularNic.mac.harqErrorRate_1st_D2D:vector.result-recording-modes = all
*.rsu.cellularNic.mac.harqErrorRate_1st_D2D:vector.result-recording-modes = all

# 9. 带宽利用率
*.gNodeB*.cellularNic.mac.usedRbDl:vector.result-recording-modes = all
*.gNodeB*.cellularNic.mac.usedRbUl:vector.result-recording-modes = all
*.gNodeB*.cellularNic.mac.usedPrbsDl:vector.result-recording-modes = all

# 10. 通信时延
*.car[*].app[0].endToEndDelay:vector.result-recording-modes = all
*.car[*].app[0].endToEndDelay:histogram.result-recording-modes = all
*.car[*].app[0].endToEndDelay:mean.result-recording-modes = all
*.car[*].app[0].endToEndDelay:max.result-recording-modes = all

# 11. 丢包率
*.car[*].udp.passedUpPk:count.result-recording-modes = all
*.car[*].udp.droppedPkWrongPort:count.result-recording-modes = all
*.car[*].udp.droppedPkBadChecksum:count.result-recording-modes = all

# 12. 吞吐量
*.car[*].app[0].rcvdPk:count.result-recording-modes = all
*.car[*].app[0].rcvdPk:sum.result-recording-modes = all
*.car[*].app[0].throughput:vector.result-recording-modes = all
*.rsu.app[0].sentPk:sum.result-recording-modes = all

# 13. 负载率
*.gNodeB*.cellularNic.mac.load:timeavg.result-recording-modes = all
*.gNodeB*.cellularNic.mac.cellLoad:vector.result-recording-modes = all

# 14. D2D/PC5特定统计
*.car[*].cellularNic.phy.d2dSinr:vector.result-recording-modes = all
*.car[*].cellularNic.phy.d2dChannelModel.rsrpVector:vector.result-recording-modes = all
*.car[*].cellularNic.mac.d2dTxOppSize:vector.result-recording-modes = all
*.rsu.cellularNic.mac.d2dTxOppSize:vector.result-recording-modes = all

# 15. 自定义指标 (由IovNRChannelModel提供)
# 这些指标将由我们创建的IovNRChannelModel类提供
*.car[*].cellularNic.channelModel.rsrpChangeRate:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.trafficDensity:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.concurrentConnections:vector.result-recording-modes = all

# 启用物理层所有统计 (5G特有)
*.car[*].cellularNic.phy.*.vector-recording = true
