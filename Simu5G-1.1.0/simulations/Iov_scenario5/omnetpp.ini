[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
image-path = ../../images
network = simu5g.simulations.Iov_scenario5.IovScenario

# Simulation parameters
debug-on-errors = false
print-undisposed = false
sim-time-limit=70s
**.udp.e2eDelay.vector-recording = true
*.rsu.udp.scalar-recording = true
*.car[0].udp.scalar-recording = true

*.playgroundSizeX = 20000m
*.playgroundSizeY = 20000m
*.playgroundSizeZ = 50m

# VeinsManager parameters
*.veinsManager.host = "localhost"
*.veinsManager.moduleType = "simu5g.nodes.cars.Car"
*.veinsManager.moduleName = "car"
*.veinsManager.launchConfig = xmldoc("heterogeneous.launchd.xml")
*.veinsManager.updateInterval = 0.1s
*.veinsManager.autoShutdown = true  # Auto shutdown SUMO
*.veinsManager.margin = 25  # Increase margin
#*.veinsManager.launchd.sumocfg = "heterogeneous.sumocfg"  # Specify SUMO config file

# Mobility parameters for dynamic nodes (cars)
*.car[*].mobilityType = "VeinsInetMobility"


# 5G NR specific parameters
**.numBands = 25
**.ueTxPower = 26
**.eNodeBTxPower = 46  # Parameter name is still eNodeBTxPower for gNodeB
**.sinrThreshold = 0dB

# 5G NR specific parameters (different from 4G LTE)
# 5G NR supports multiple frequency bands, using 3.5GHz mid-band (n78 band)
**.cellularNic.channelModel.componentCarrierFrequency = 3.5GHz  # 5G mid-band frequency
**.cellularNic.channelModel.carrierFrequency = 3.5GHz
# According to 3GPP, 5G NR 20MHz bandwidth with 15kHz subcarrier spacing has 106 resource blocks
**.cellularNic.channelModel.numRbDl = 106  # Resource blocks in 5G NR 20MHz bandwidth
**.cellularNic.channelModel.numRbUl = 106
**.cellularNic.channelModel.numBands = 25
# 5G NR supports multiple subcarrier spacing (SCS): 15kHz, 30kHz, 60kHz, 120kHz, etc.
**.cellularNic.nrChannelModel[0].scs = "15kHz"  # Subcarrier spacing
**.cellularNic.nrChannelModel[0].numRefScPerRb = 12
# 5G NR introduces Numerology concept, different SCS corresponds to different Numerology value
**.cellularNic.nrChannelModel[0].rbxNumerology = 1  # 5G NR Numerology

# Dynamic cell association for mobile nodes
*.car[*].cellularNic.phy.dynamicCellAssociation = true
**.car[*].masterId = 1
**.car[*].macCellId = 1

# gNodeB configuration
**.gNodeB1.macCellId = 1
**.gNodeB1.macNodeId = 1
**.gNodeB2.macCellId = 2
**.gNodeB2.macNodeId = 2
**.gNodeB3.macCellId = 3
**.gNodeB3.macNodeId = 3

# Enable handover
*.car[*].cellularNic.phy.enableHandover = false
*.gNodeB*.cellularNic.phy.enableHandover = false
*.gNodeB*.cellularNic.phy.handoverLatency = uniform(40ms, 60ms)
*.gNodeB*.cellInfo.broadcastMessageInterval = 1s

# X2 and SCTP configuration (called Xn in 5G, but still X2 in Simu5G)
*.gNodeB1.numX2Apps = 2
*.gNodeB2.numX2Apps = 2
*.gNodeB3.numX2Apps = 2

# gNodeB1 connections
*.gNodeB1.x2App[0].client.connectAddress = "gNodeB2%x2ppp0"
*.gNodeB1.x2App[1].client.connectAddress = "gNodeB3%x2ppp0"

# gNodeB2 connections
*.gNodeB2.x2App[0].client.connectAddress = "gNodeB1%x2ppp0"
*.gNodeB2.x2App[1].client.connectAddress = "gNodeB3%x2ppp0"

# gNodeB3 connections
*.gNodeB3.x2App[0].client.connectAddress = "gNodeB1%x2ppp0"
*.gNodeB3.x2App[1].client.connectAddress = "gNodeB2%x2ppp0"

# Common X2 configuration
**.gNodeB*.x2App[*].server.localPort = 5000 + ancestorIndex(1)
**.gNodeB*.x2App[*].client.connectPort = 5000
**.gNodeB*.x2App[*].client.startTime = 0.5s
**.sctp.nagleEnabled = false
**.sctp.enableHeartbeats = false

# --- Basic 5G NR configuration ---
[Config Base5G]
# 5G NR NIC type configuration
*.car[*].cellularNic.nicType = "NRNicUe"
*.gNodeB*.cellularNic.nicType = "NRNicGnb"

# Use IoV-specific Channel Model
*.car[*].cellularNic.channelModel.typename = "IovNRChannelModel"
*.gNodeB*.cellularNic.channelModel.typename = "IovNRChannelModel"
*.rsu.cellularNic.channelModel.typename = "IovNRChannelModel"

# RSU configuration
*.rsu.mobility.initialX = 560m
*.rsu.mobility.initialY = 42m
*.rsu.mobility.initialZ = 0m
# Since RSU is now based on NRCar module, it already has cellular interface and HostAutoConfigurator, no need for additional interface config

# 5G NR scheduling configuration
*.gNodeB*.cellularNic.mac.schedulingDisciplineDl = "MAXCI"
*.gNodeB*.cellularNic.mac.schedulingDisciplineUl = "MAXCI"

# 5G NR physical layer features
*.gNodeB*.cellularNic.phy.enableBLER = true
*.gNodeB*.cellularNic.phy.fbPeriod = 40  # Feedback period
*.gNodeB*.cellularNic.phy.usePrecoding = true  # Use precoding
*.gNodeB*.cellularNic.phy.numAntennas = 8  # Number of antennas
*.car[*].cellularNic.phy.numAntennas = 4  # UE antennas

# --- PC5 direct communication configuration ---
# Enable D2D (PC5 Sidelink) functionality globally
# This allows vehicles and RSU to communicate directly, without going through base station

# PC5/D2D configuration - using D2D mode to simulate PC5 direct communication
*.car[*].cellularNic.d2dCapable = true  # Enable D2D (simulate PC5)
*.rsu.cellularNic.d2dCapable = true
*.rsu.nrMasterId = 1     # 5G NR master station ID 
*.rsu.nrMacCellId = 1    # 5G NR cell ID
*.gNodeB*.cellularNic.d2dEnabled = true # Base station supports D2D

# Set D2D initial mode
*.car[*].cellularNic.d2dInitialMode = true
*.rsu.cellularNic.d2dInitialMode = true

# Set AMC mode to D2D
**.amcMode = "D2D"

# Ensure RSU can use PC5/D2D communication
# RSU's LTE/4G parameters (legacy)
*.rsu.masterId = 1  # Initially associated with gNodeB1
*.rsu.macCellId = 1

# PC5 transmit power
*.car[*].cellularNic.phy.d2dTxPower = 23  # dBm
*.rsu.cellularNic.phy.d2dTxPower = 26     # dBm

# D2D CQI configuration
*.gNodeB*.cellularNic.phy.enableD2DCqiReporting = true  # Enable D2D CQI reporting
**.usePreconfiguredTxParams = false  # Dynamic CQI selection

# PC5 resource reservation
*.gNodeB*.cellularNic.mac.schedulingGrantType = "AUTOMATIC"
*.gNodeB*.cellularNic.mac.d2dResourceReservationInterval = 0.1s

# --- Traffic light information application using PC5 ---
[Config PC5TrafficInfo]
extends = Base5G
output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${repetition}.vec

# Application layer configuration
*.rsu.numApps = 1
*.car[*].numApps = 1

# --- RSU application (sender) ---
*.rsu.app[0].typename = "simu5g.apps.trafficlight.TrafficLightRsuApp"
*.rsu.app[0].destAddresses = "255.255.255.255" # Fixed: Use broadcast address, matching PC5 behavior
*.rsu.app[0].destPort = 5001
*.rsu.app[0].checkInterval = 0.5s  # Check traffic light status every 0.5 seconds
*.rsu.app[0].traciModulePath = "veinsManager"
*.rsu.app[0].monitoredTLs = "0/0,0/1,0/2,1/0,1/1,1/2,2/0,2/1,2/2"  # Monitor all 9 intersection traffic lights
*.rsu.app[0].messageLength = 500B
*.rsu.app[0].multicastInterface = "wlan" # Use NRCar's default wireless interface name

# --- Car application (receiver) ---
*.car[*].app[0].typename = "simu5g.apps.trafficlight.TrafficLightCarApp"
*.car[*].app[0].localPort = 5001 # Must specify listening port

# --- Core statistics collection ---
# 1. Application layer end-to-end delay
*.car[*].app[0].tlInfoReceived:count.result-recording-modes = all
*.car[*].app[0].endToEndDelay:vector.result-recording-modes = all
*.car[*].app[0].endToEndDelay:mean.result-recording-modes = all
*.car[*].app[0].endToEndDelay:max.result-recording-modes = all
*.rsu.app[0].sentPk:count.result-recording-modes = all

# 2. Signal quality metrics
*.car[*].cellularNic.channelModel.rcvdSinr:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.distance:vector.result-recording-modes = all

# 3. Signal strength and change rate
# In 5G, we use RSRP (Reference Signal Received Power) instead of RSSI
*.car[*].cellularNic.channelModel.receivedPower:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.rsrp:vector.result-recording-modes = all

# 4. Coverage (based on SINR threshold)
*.car[*].cellularNic.channelModel.coverageStatus:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.coverageStatus:timeavg.result-recording-modes = all

# 5. Interruption statistics
*.car[*].cellularNic.channelModel.connectionInterruption:count.result-recording-modes = all
*.car[*].cellularNic.channelModel.connectionRestoration:count.result-recording-modes = all
*.car[*].cellularNic.channelModel.interruptionDuration:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.interruptionDuration:mean.result-recording-modes = all
*.car[*].cellularNic.channelModel.interruptionDuration:max.result-recording-modes = all

# 6. Interference level (SINR)
*.car[*].cellularNic.channelModel.interferencePower:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.sinr:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.rcvdSinr:vector.result-recording-modes = all
*.car[*].cellularNic.phy.d2dChannelModel.sinrVector:vector.result-recording-modes = all

# 7. Handover failure rate
*.car[*].cellularNic.phy.handoverAttempt:count.result-recording-modes = all
*.car[*].cellularNic.phy.handoverFailure:count.result-recording-modes = all
*.gNodeB*.handoverManager.startHandover:count.result-recording-modes = all
*.gNodeB*.handoverManager.endHandover:count.result-recording-modes = all

# 8. HARQ error rate
*.car[*].cellularNic.mac.harqErrorRateUl:vector.result-recording-modes = all
*.car[*].cellularNic.mac.harqErrorRateDl:vector.result-recording-modes = all
*.car[*].cellularNic.mac.harqErrorRateD2D:vector.result-recording-modes = all
*.rsu.cellularNic.mac.harqErrorRateD2D:vector.result-recording-modes = all
*.car[*].cellularNic.mac.harqErrorRate_1st_D2D:vector.result-recording-modes = all
*.rsu.cellularNic.mac.harqErrorRate_1st_D2D:vector.result-recording-modes = all

# 9. Bandwidth utilization
*.gNodeB*.cellularNic.mac.usedRbDl:vector.result-recording-modes = all
*.gNodeB*.cellularNic.mac.usedRbUl:vector.result-recording-modes = all
*.gNodeB*.cellularNic.mac.usedPrbsDl:vector.result-recording-modes = all

# 10. Communication delay
*.car[*].app[0].endToEndDelay:vector.result-recording-modes = all
*.car[*].app[0].endToEndDelay:histogram.result-recording-modes = all
*.car[*].app[0].endToEndDelay:mean.result-recording-modes = all
*.car[*].app[0].endToEndDelay:max.result-recording-modes = all

# 11. Packet loss rate
*.car[*].udp.passedUpPk:count.result-recording-modes = all
*.car[*].udp.droppedPkWrongPort:count.result-recording-modes = all
*.car[*].udp.droppedPkBadChecksum:count.result-recording-modes = all

# 12. Throughput
*.car[*].app[0].rcvdPk:count.result-recording-modes = all
*.car[*].app[0].rcvdPk:sum.result-recording-modes = all
*.car[*].app[0].throughput:vector.result-recording-modes = all
*.rsu.app[0].sentPk:sum.result-recording-modes = all

# 13. Load rate
*.gNodeB*.cellularNic.mac.load:timeavg.result-recording-modes = all
*.gNodeB*.cellularNic.mac.cellLoad:vector.result-recording-modes = all

# 14. D2D/PC5 specific statistics
*.car[*].cellularNic.phy.d2dSinr:vector.result-recording-modes = all
*.car[*].cellularNic.phy.d2dChannelModel.rsrpVector:vector.result-recording-modes = all
*.car[*].cellularNic.mac.d2dTxOppSize:vector.result-recording-modes = all
*.rsu.cellularNic.mac.d2dTxOppSize:vector.result-recording-modes = all

# 15. Custom metrics (provided by IovNRChannelModel)
# These metrics will be provided by our created IovNRChannelModel class
*.car[*].cellularNic.channelModel.rsrpChangeRate:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.trafficDensity:vector.result-recording-modes = all
*.car[*].cellularNic.channelModel.concurrentConnections:vector.result-recording-modes = all

# Enable all physical layer statistics (5G-specific)
*.car[*].cellularNic.phy.*.vector-recording = true